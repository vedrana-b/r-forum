{"version":3,"sources":["services/topic.service.js","components/homepage.js","services/auth.service.js","components/addAnswer.js","components/answer.js","components/answer-list.js","components/sign-up.js","components/login.js","components/navigation.js","components/topic-page.js","App.js","serviceWorker.js","index.js"],"names":["defaultTopics","id","title","answers","publishedAt","publishedBy","text","getDefaultTopics","localStorage","setItem","JSON","stringify","parse","module","exports","getTopics","Promise","resolve","reject","topics","getItem","status","data","map","topic","lastAnswerPublishedAt","length","sort","answer1","answer2","Date","getTime","numberOfAnswers","getTopic","topicId","find","addTopic","push","addAnswer","answer","Homepage","mobile","Container","fluid","className","Header","as","inverted","content","style","fontSize","fontWeight","marginTop","hashPassword","plainPassword","saltParam","saltRounds","salt","Math","random","toString","substr","hashedPassword","i","btoa","login","username","password","user","split","atob","comparePassword","removeItem","isLoggedIn","getUser","AddAnswer","props","useState","error","setError","textLength","reply","setReply","Form","TextArea","onChange","event","target","value","newTextLength","textLeft","message","pointing","placeholder","Button","onClick","e","authService","onAddAnswer","floor","document","getElementById","click","labelPosition","icon","primary","Answer","Comment","Group","Avatar","src","process","Content","Author","Metadata","toLocaleString","navigator","language","dateStyle","timeStyle","hour12","Text","AnswerList","Fragment","key","Joi","require","SignUp","confirmPassword","checked","setUsers","modalOpen","modal","setModal","resetValues","getError","prop","details","err","path","includes","isLogged","Modal","size","onClose","open","closeIcon","Field","Input","type","Checkbox","label","isValid","object","string","alphanum","min","max","required","messages","pattern","valid","ref","boolean","options","abortEarly","validate","users","then","response","LogIn","setMessage","compact","isLoggedOut","iconPosition","Message","onLogin","negative","console","log","Navigation","loginStatus","setLoginStatus","window","location","href","TopicPage","setTopic","useEffect","topicService","match","params","backgroundColor","App","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7cb8691d.chunk.js","sourcesContent":["const defaultTopics = [\r\n    {\r\n        id: \"1\",\r\n        title: \"Where to find a nice dress\",\r\n        answers: [\r\n            {\r\n                id: '1',\r\n                publishedAt: \"2020-05-06 12:23:45\",\r\n                publishedBy: \"John Doe\",\r\n                text: \"You can find dress in street Kralja Petra\"\r\n            },\r\n            {\r\n                id: '2',\r\n                publishedAt: \"2020-05-06 15:00:01\",\r\n                publishedBy: \"John Doe\",\r\n                text: \"I have found mine there\"\r\n            },\r\n            {\r\n                id: '3',\r\n                publishedAt: \"2020-05-06 19:43:15\",\r\n                publishedBy: \"John Doe\",\r\n                text: \"There are also nice stores in street Strahinjica Bana\"\r\n            },\r\n            {\r\n                id: '4',\r\n                publishedAt: \"2020-05-06 20:23:55\",\r\n                publishedBy: \"Petar Petrovic\",\r\n                text: \"I am interested about dresses in Panchevo\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: \"2\",\r\n        title: \"Interesting games to play\",\r\n        answers: [\r\n            {\r\n                id: '1',\r\n                publishedAt: \"2020-05-06 12:23:45\",\r\n                publishedBy: \"John Doe\",\r\n                text: \"quroidor\"\r\n            },\r\n            {\r\n                id: '2',\r\n                publishedAt: \"2020-05-06 15:00:01\",\r\n                publishedBy: \"Vedrana Bradasevic\",\r\n                text: \"Monopol\"\r\n            },\r\n            {\r\n                id: '12',\r\n                publishedAt: \"2020-05-06 19:43:15\",\r\n                publishedBy: \"Nikolija Nikolic\",\r\n                text: \"Jamb\"\r\n            },\r\n            {\r\n                id: '4',\r\n                publishedAt: \"2020-05-06 20:23:55\",\r\n                publishedBy: \"Petar Petrovic\",\r\n                text: \"Lora\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        id: \"3\",\r\n        title: \"Songs for weddings\",\r\n        answers: [\r\n            {\r\n                id: '1',\r\n                publishedAt: \"2020-05-06 12:23:45\",\r\n                publishedBy: \"John Doe\",\r\n                text: \"Dance with somebody\"\r\n            },\r\n            {\r\n                id: '2',\r\n                publishedAt: \"2020-05-06 15:00:01\",\r\n                publishedBy: \"Vedrana Bradasevic\",\r\n                text: \"I have found mine there\"\r\n            },\r\n            {\r\n                id: '3',\r\n                publishedAt: \"2020-05-06 19:43:15\",\r\n                publishedBy: \"Nikolija Nikolic\",\r\n                text: \"There are also nice stores in street Strahinjica Bana\"\r\n            },\r\n            {\r\n                id: '4',\r\n                publishedAt: \"2020-05-06 20:23:55\",\r\n                publishedBy: \"Petar Petrovic\",\r\n                text: \"I am interested about dresses in Panchevo\"\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\nconst getDefaultTopics = () => {\r\n    localStorage.setItem('topics', JSON.stringify(defaultTopics));\r\n    return JSON.parse(JSON.stringify(defaultTopics));\r\n}\r\n\r\nmodule.exports.getTopics = () => {\r\n    return new Promise((resolve, reject) => {\r\n        let topics = JSON.parse(localStorage.getItem(\"topics\")) || getDefaultTopics();\r\n        topics = topics.map(topic => {\r\n            return {\r\n                id: topic.id,\r\n                title: topic.title,\r\n                lastAnswerPublishedAt: topic.answers.length > 0 ? topic.answers.sort((answer1, answer2) =>\r\n                 { return new Date(answer2.publishedAt).getTime() - new Date(answer1.publishedAt).getTime() })[0].publishedAt : null,\r\n                numberOfAnswers: topic.answers.length\r\n            }\r\n        });\r\n        resolve({\r\n            status: 200,\r\n            data: topics\r\n        });\r\n    });\r\n};\r\n\r\nmodule.exports.getTopic = (topicId) => {\r\n    return new Promise((resolve, reject) => {\r\n        const topics = JSON.parse(localStorage.getItem(\"topics\")) || getDefaultTopics();\r\n        resolve(topics.find(topic => topic.id === topicId));\r\n    });\r\n};\r\n\r\nmodule.exports.addTopic = (topic) => {\r\n    return new Promise((resolve, reject) => {\r\n        const topics = JSON.parse(localStorage.getItem(\"topics\")) || [];\r\n        if (topic.title.length < 5) {\r\n            return;\r\n        } else {\r\n            topics.push(topic);\r\n        }\r\n        localStorage.setItem(\"topics\", JSON.stringify(topics));\r\n        resolve({\r\n            status: 201\r\n        });\r\n    });\r\n};\r\n\r\nmodule.exports.addAnswer = (topicId, answer) => {\r\n    return new Promise((resolve, reject) => {\r\n        const topics = JSON.parse(localStorage.getItem(\"topics\")) || getDefaultTopics();\r\n        const topic = topics.find(topic => topic.id == topicId);\r\n        topic.answers.push(answer);\r\n        localStorage.setItem('topics', JSON.stringify(topics));\r\n        resolve({\r\n            status: 201\r\n        });\r\n    });\r\n}","import React from \"react\";\r\nimport \"./homepage.scss\";\r\nimport { Container, Header, Button } from 'semantic-ui-react'\r\n//import Topics from \"./topics\";\r\n//import Navigation from \"./navigation\";\r\n\r\n\r\n\r\nconst Homepage = ({ mobile }) => {\r\n    return (\r\n        <Container fluid className=\"main-container\">\r\n            <div className=\"homepage__block\">\r\n                <div className=\"homepage__block--button\">\r\n                   \r\n                </div>\r\n                <div className=\"homepage__title\">\r\n                    <Header as=\"h1\" inverted content='Welcome to Forum'></Header>\r\n                    <Header\r\n                        as='h2'\r\n                        content='Do whatever you want when you want to.'\r\n                        inverted\r\n                        style={{\r\n                            fontSize: mobile ? '1.5em' : '1.7em',\r\n                            fontWeight: 'normal',\r\n                            marginTop: mobile ? '0.5em' : '1.5em',\r\n                        }}\r\n                    />\r\n                </div>\r\n\r\n            </div>\r\n            <Container className=\"grid-container\">\r\n                <div className=\"homepage\">\r\n                    <div className=\"homepage__content\">\r\n                     \r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </Container>\r\n\r\n    )\r\n}\r\nexport default Homepage;","\r\nconst hashPassword = (plainPassword, saltParam, saltRounds) => {\r\n    const salt = saltParam || Math.random().toString(36).substr(2, 20);\r\n    let hashedPassword = plainPassword;\r\n    for (let i = 0; i < saltRounds; i++) {\r\n        hashedPassword = btoa(plainPassword + salt);\r\n    }\r\n    return `$${btoa(salt)}$${saltRounds}$${hashedPassword}`;\r\n}\r\n\r\nconst comparePassword = (plainPassword, hashedPassword) => {\r\n    const [_, salt, saltRounds, hash] = hashedPassword.split(\"$\");\r\n    return hashPassword(plainPassword, atob(salt), saltRounds) === hashedPassword;\r\n}\r\n\r\nexport function addUser(username, password) {\r\n    return new Promise((resolve, reject) => {\r\n        const users = JSON.parse(localStorage.getItem(\"users\")) || [];\r\n        const user = {\r\n            username: username,\r\n            password: hashPassword(password, null, 10)\r\n        }\r\n        users.push(user);\r\n        localStorage.setItem(\"users\", JSON.stringify(users));\r\n\r\n        resolve({\r\n            status: 201\r\n        });\r\n    });\r\n}\r\n\r\nexport function login(username, password) {\r\n    return new Promise((resolve, reject) => {\r\n        const users = JSON.parse(localStorage.getItem('users') || []);\r\n        const user = users.find(user => user.username === username);\r\n        const hashedPassword = user.password;\r\n\r\n        if (user && comparePassword(password, hashedPassword)) {\r\n            localStorage.setItem('access_token', username);\r\n            resolve({\r\n                status: 200\r\n            })\r\n        } else {\r\n            localStorage.removeItem('access_token', username);\r\n            resolve({\r\n                status: 401\r\n            })\r\n        }\r\n    });\r\n}\r\n\r\nexport function isLoggedIn() {\r\n    const token = localStorage.getItem('access_token');\r\n    if (token) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem('access_token');\r\n    return window.location.href = '/';\r\n}\r\n\r\nexport function getUser() {\r\n    const username = localStorage.getItem('access_token');\r\n    return username;\r\n}\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button, Comment } from 'semantic-ui-react';\r\nimport * as authService from \"../services/auth.service\";\r\n\r\nconst AddAnswer = (props) => {\r\n    const [error, setError] = useState({});\r\n    let [reply, setReply] = useState({ text: '', textLength: 200 });\r\n\r\n    let textHandler = (event) => {\r\n        let text = event.target.value;\r\n        let newTextLength = text.length;\r\n        let max = 200;\r\n        let textLeft = max - newTextLength;\r\n        if (newTextLength > max) {\r\n            setError({ ...error, textLength: { message: \"You have reached the limit\" } });\r\n            return;\r\n        } else {\r\n            setError({ ...error, textLength: null })\r\n        }\r\n        setReply({ ...reply, text: text, textLength: textLeft });\r\n    }\r\n\r\n    const replyHandler = (e) => {\r\n        if (!authService.isLoggedIn()) {\r\n            document.getElementById('loginButton').click();\r\n            return;\r\n        }\r\n\r\n        // Validations\r\n        if (!reply.text) {\r\n            setError({ ...error, text: { message: \"This field cannot be empty\" } });\r\n            return;\r\n        } else if (reply.text.length <= 1) {\r\n            setError({ ...error, text: { message: \"This field has to have more than 1 letter\" } })\r\n            return;\r\n        } else {\r\n            setError({ ...error, text: false })\r\n        }\r\n\r\n        props.onAddAnswer({\r\n            id: Math.floor(Math.random() * 100),\r\n            publishedAt: new Date(),\r\n            publishedBy: authService.getUser(),\r\n            text: reply.text\r\n        })\r\n        setReply({ ...reply, text: '', textLength: '200' });\r\n    }\r\n\r\n\r\n    return (\r\n        <Form reply>\r\n            <Form.TextArea\r\n                onChange={textHandler}\r\n                value={reply.text}\r\n                error={error.text ? { content: error.text.message, pointing: 'below' } : null}\r\n                placeholder=\"Answer\">\r\n            </Form.TextArea>\r\n            <p>{reply.textLength}</p>\r\n            {error.textLength && <p>{error.textLength.message}</p>}\r\n            <Button onClick={replyHandler} content='Add Reply' labelPosition='left' icon='edit' primary />\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default AddAnswer;","import React, { useState, useEffect } from \"react\";\r\nimport { Comment } from 'semantic-ui-react'\r\n\r\nconst Answer = (props) => {\r\n    return (\r\n        <Comment.Group>\r\n            <Comment>\r\n                <Comment.Avatar as='a' src={process.env.PUBLIC_URL + '/unknown.png'} />\r\n                <Comment.Content>\r\n                    <Comment.Author>{props.publishedBy}</Comment.Author>\r\n                    <Comment.Metadata>\r\n                        {new Date(props.publishedAt).toLocaleString(navigator.language, { dateStyle: 'long', timeStyle: 'short', hour12: true })}\r\n                    </Comment.Metadata>\r\n                    <Comment.Text>\r\n                        {props.text}\r\n                    </Comment.Text>\r\n                </Comment.Content>\r\n            </Comment>\r\n        </Comment.Group>\r\n    )\r\n}\r\n\r\nexport default Answer;","import React, { useState, useEffect } from \"react\";\r\nimport Answer from \"./answer\";\r\n\r\nconst AnswerList = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            {props.answers && props.answers.map(answer => {\r\n                return (\r\n                    <Answer key={answer.id}\r\n                        publishedBy={answer.publishedBy}\r\n                        publishedAt={answer.publishedAt}\r\n                        text={answer.text}\r\n                    />\r\n                )\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default AnswerList;","import React, { useState, useEffect } from 'react'\r\nimport { Button, Form, Modal } from 'semantic-ui-react'\r\nimport * as authService from \"../services/auth.service\";\r\nconst Joi = require('@hapi/joi');\r\n\r\n\r\n\r\nconst SignUp = (props) => {\r\n    const [user, setUsers] = useState({ username: '', password: '', confirmPassword: '', checked: false });\r\n    const [error, setError] = useState();\r\n    const [modal, setModal] = useState({ modalOpen: false });\r\n\r\n    const handleOpen = () => {\r\n        setModal({ ...modal, modalOpen: true });\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setModal({ ...modal, modalOpen: false });\r\n        resetValues();\r\n    }\r\n\r\n    const resetValues = () => {\r\n        setUsers({ ...user, username: '', password: '', confirmPassword: '', checked: false });\r\n    }\r\n\r\n    const addUsernameHandler = (event) => {\r\n        let username = event.target.value;\r\n        setUsers({ ...user, username: username });\r\n    }\r\n\r\n    const addPasswordHandler = (event) => {\r\n        let password = event.target.value;\r\n        setUsers({ ...user, password: password });\r\n    }\r\n\r\n    const addConfirmPasswordHandler = (event) => {\r\n        let confirmPassword = event.target.value;\r\n        setUsers({ ...user, confirmPassword: confirmPassword });\r\n    }\r\n\r\n    const checkboxHandler = () => {\r\n        setUsers({ ...user, checked: !user.checked });\r\n    }\r\n\r\n    const validations = () => {\r\n        const schema = Joi.object({\r\n            username: Joi.string()\r\n                .alphanum()\r\n                .min(3)\r\n                .max(30)\r\n                .required()\r\n                .messages({\r\n                    'string.base': `Username should be a type of 'text'`,\r\n                    'string.empty': `Username cannot be an empty field`,\r\n                    'string.min': `Username should have a minimum length of {#limit}`,\r\n                    'string.max': `Password should have a maximum length of {#limit}`,\r\n                    'any.required': `Username is a required field`\r\n                }),\r\n            password: Joi.string()\r\n                .pattern(/^[a-zA-Z0-9]*$/)\r\n                .min(8)\r\n                .max(30)\r\n                .required()\r\n                .messages({\r\n                    'string.pattern.base': `Password should contain numbers and letters only`,\r\n                    'string.empty': `Password cannot be an empty field`,\r\n                    'string.min': `Password should have a minimum length of {#limit}`,\r\n                    'string.max': `Password should have a maximum length of {#limit}`,\r\n                    'any.required': `Password is a required field`\r\n                }),\r\n            confirmPassword: Joi.string()\r\n                .valid(Joi.ref('password'))\r\n                .required()\r\n                .messages({\r\n                    'string.pattern.base': `Confirm password should contain numbers and letters only`,\r\n                    'string.empty': `Confirm password cannot be an empty field`,\r\n                    'any.required': `Confirm password is a required field`,\r\n                    'any.only': \"Passwords are not matching\"\r\n                }),\r\n            checked: Joi.boolean()\r\n                .valid(true)\r\n        }).options({\r\n            abortEarly: false\r\n        });\r\n\r\n        return schema.validate(user);\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        const isValid = validations().error;\r\n        setError(isValid);\r\n\r\n        if (isValid) {\r\n            return;\r\n        }\r\n\r\n        authService.addUser(user.username, user.password).then(response => {\r\n            setModal({ ...modal, modalOpen: false });\r\n            resetValues();\r\n        });\r\n    }\r\n\r\n    const getError = (error, prop) => {\r\n        return error && error.details.find(err => err.path.includes(prop));\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {!props.isLogged &&\r\n                <Button onClick={handleOpen}>Sign Up</Button>}\r\n            <Modal size='tiny'\r\n                onClose={handleClose}\r\n                open={modal.modalOpen}\r\n                closeIcon>\r\n                <Modal.Header>Sign Up</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Username</label>\r\n                            <Form.Input\r\n                                error={getError(error, 'username') ? { content: getError(error, 'username').message, pointing: 'above' } : null}\r\n                                value={user.username} onChange={addUsernameHandler} />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Password</label>\r\n                            <Form.Input\r\n                                error={getError(error, \"password\") ? { content: getError(error, \"password\").message, pointing: 'above' } : null}\r\n                                value={user.password}\r\n                                type=\"password\"\r\n                                onChange={addPasswordHandler}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Confirm Password</label>\r\n                            <Form.Input\r\n                                value={user.confirmPassword}\r\n                                error={getError(error, \"confirmPassword\") ? { content: getError(error, \"confirmPassword\").message, pointing: 'above' } : null}\r\n                                type=\"password\" onChange={addConfirmPasswordHandler}\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <Form.Checkbox checked={user.checked} error={getError(error, 'checked') ? true : null} onChange={checkboxHandler} label='I agree to the Terms and Conditions' />\r\n                        </Form.Field>\r\n                        <Button onClick={submitHandler} type='submit'>Submit</Button>\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SignUp;","import React, { useState } from 'react'\r\nimport { Button, Form, Modal, Message } from 'semantic-ui-react'\r\nimport * as authService from \"../services/auth.service\"\r\n\r\n\r\nconst LogIn = (props) => {\r\n    const [user, setUsers] = useState({ username: '', password: '' });\r\n    const [modal, setModal] = useState({ modalOpen: false });\r\n    const [message, setMessage] = useState({});\r\n\r\n    const handleOpen = () => {\r\n        setModal({ ...modal, modalOpen: true });\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setModal({ ...modal, modalOpen: false });\r\n        resetValues();\r\n    }\r\n\r\n    const resetValues = () => {\r\n        setUsers({ ...user, username: '', password: '' });\r\n    }\r\n\r\n    const addUsernameHandler = (event) => {\r\n        let username = event.target.value;\r\n        setUsers({ ...user, username: username });\r\n    }\r\n\r\n    const addPasswordHandler = (event) => {\r\n        let password = event.target.value;\r\n        setUsers({ ...user, password: password });\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        authService.login(user.username, user.password).then(response => {\r\n            if (response.status === 200) {\r\n                setModal({ ...modal, modalOpen: false });\r\n                resetValues();\r\n                props.onLogin();\r\n            } else if (response.status === 401) {\r\n                setMessage({ ...message, login: { negative: true, content: 'Username or password are not correct' } })\r\n            }\r\n            console.log(user);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {!props.isLogged &&\r\n                <Button id=\"loginButton\" onClick={handleOpen}>Log In</Button>}\r\n            {props.isLogged &&\r\n                <Button compact onClick={props.isLoggedOut}>Log out</Button>}\r\n            <Modal\r\n                size='tiny'\r\n                onClose={handleClose}\r\n                open={modal.modalOpen}\r\n                closeIcon>\r\n                <Modal.Header>Log in</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Username</label>\r\n                            <Form.Input\r\n                                fluid\r\n                                icon='user'\r\n                                iconPosition='left'\r\n                                value={user.username}\r\n                                onChange={addUsernameHandler}\r\n                            />\r\n\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Password</label>\r\n                            <Form.Input\r\n                            fluid\r\n                                icon='lock'\r\n                                iconPosition='left'\r\n                                type='password'\r\n                                value={user.password}\r\n                                onChange={addPasswordHandler}\r\n                            />\r\n                        </Form.Field>\r\n                        {message.login &&\r\n                            <Message {...message.login}>\r\n                            </Message>}\r\n                        <Button onClick={submitHandler} type='submit'>Log in</Button>\r\n                    </Form>\r\n                </Modal.Content>\r\n            </Modal>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default LogIn;","import React, { useEffect, useState } from \"react\";\r\nimport \"./homepage.scss\";\r\nimport SignUp from \"./sign-up\";\r\nimport LogIn from \"./login\";\r\nimport * as authService from \"../services/auth.service\";\r\n\r\n\r\nconst Navigation = () => {\r\n    const [loginStatus, setLoginStatus] = useState(authService.isLoggedIn());\r\n\r\n    const loginHandler = () => {\r\n        setLoginStatus(authService.isLoggedIn());\r\n    }\r\n\r\n    const logOut = () => {\r\n        authService.logout();\r\n        setLoginStatus(authService.isLoggedIn());\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {loginStatus &&\r\n                <h5 className=\"ui header avatar-header\">\r\n                    <img src={process.env.PUBLIC_URL + '/unknown.png' } className=\"ui circular image\" />\r\n                    {authService.getUser()}\r\n                </h5> }\r\n            <LogIn isLoggedOut={logOut} isLogged={loginStatus} onLogin={loginHandler} />\r\n            <SignUp isLogged={loginStatus} />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Header } from 'semantic-ui-react'\r\nimport AddAnswer from \"./addAnswer\";\r\nimport \"./homepage.scss\";\r\nimport topicService from \"../services/topic.service\"\r\nimport AnswerList from \"./answer-list\";\r\nimport Navigation from \"./navigation\";\r\n\r\nconst TopicPage = (props) => {\r\n    const [topic, setTopic] = useState({});\r\n\r\n    useEffect(() => {\r\n        topicService.getTopic(props.match.params.topicId).then(topic => {\r\n            setTopic(topic);\r\n        });\r\n    }, []);\r\n\r\n    const addBackground = () => {\r\n        let pallete = ['red', 'blue', 'green', 'orange', 'purple', 'pink', 'yellow', 'lavander', 'lightblue', 'brown'];\r\n        let modulos = topic.id % 10;\r\n        return pallete[modulos];\r\n\r\n    }\r\n\r\n    const addAnswerHandler = (answer) => {\r\n        topicService.addAnswer(topic.id, answer).then(response => {\r\n            setTopic({\r\n                ...topic,\r\n                answers: [...topic.answers, answer]\r\n            })\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"main-container\">\r\n            <div className=\"homepage__block\">\r\n                <div className=\"homepage__block--button\">\r\n                    <Navigation />\r\n                </div>\r\n                <div style={{ backgroundColor: addBackground() }} className=\"homepage__title\">\r\n                    <Header as=\"h2\" inverted content={topic.title}></Header>\r\n                </div>\r\n                <Container className=\"grid-container\">\r\n                    <div className=\"topic-page\">\r\n                        <AnswerList answers={topic.answers} />\r\n                        <AddAnswer onAddAnswer={addAnswerHandler} />\r\n                    </div>\r\n                </Container>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TopicPage;","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\nimport './App.scss';\n\nimport Homepage from \"./components/homepage\";\nimport TopicPage from './components/topic-page';\n\nfunction App() {\n    return (\n        <div >\n            <Router>\n                <Switch>\n                    <Route path=\"/\" exact component={Homepage}></Route>\n                    <Route path=\"/question/:topicId\" component={TopicPage}></Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}